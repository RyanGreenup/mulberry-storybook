import{m as $,a as C,s as j,u as b,b as K,d as l,c as O,e as M,f as P,g as x,w as E}from"./css-C_pJ_J0K.js";const h=t=>({base:{},variants:{},defaultVariants:{},compoundVariants:[],...t});function F(t){const{base:r,variants:n,defaultVariants:a,compoundVariants:f}=h(t),s=i=>({...a,...C(i)});function e(i={}){const o=s(i);let p={...r};for(const[V,y]of Object.entries(o))n[V]?.[y]&&(p=l(p,n[V][y]));const d=v(f,o);return l(p,d)}function g(i){const o=h(i.config),p=b(i.variantKeys,Object.keys(n));return F({base:l(r,o.base),variants:Object.fromEntries(p.map(d=>[d,l(n[d],o.variants[d])])),defaultVariants:K(a,o.defaultVariants),compoundVariants:[...f,...o.compoundVariants]})}function m(i){return O(e(i))}const _=Object.keys(n);function c(i){return j(i,_)}const u=Object.fromEntries(Object.entries(n).map(([i,o])=>[i,Object.keys(o)]));return Object.assign($(m),{__cva__:!0,variantMap:u,variantKeys:_,raw:e,config:t,merge:g,splitVariantProps:c,getVariantProps:s})}function v(t,r){let n={};return t.forEach(a=>{Object.entries(a).every(([s,e])=>s==="css"?!0:(Array.isArray(e)?e:[e]).some(m=>r[s]===m))&&(n=l(n,a.css))}),n}function S(t,r,n,a){if(r.length>0&&typeof n?.[a]=="object")throw new Error(`[recipe:${t}:${a}] Conditions are not supported when using compound variants.`)}function w(){let t="",r=0,n;for(;r<arguments.length;)(n=arguments[r++])&&typeof n=="string"&&(t&&(t+=" "),t+=n);return t}const D=(t,r,n)=>{const a=s=>({[t]:"__ignore__",...r,...C(s)});return{recipeFn:(s,e=!0)=>{const m=M({conditions:{shift:x,finalize:P,breakpoints:{keys:["base","sm","md","lg","xl","2xl","minWidthDrawer","minWidthBtmDash"]}},utility:{toHash:(c,u)=>u(c.join(":")),transform:(c,u)=>(S(t,n,s,c),u==="__ignore__"?{className:t}:(u=E(u),{className:`${t}--${c}_${u}`}))}}),_=a(s);if(e){const c=v(n,_);return w(m(_),O(c))}return m(_)},getVariantProps:a,__getCompoundVariantCss__:s=>v(n,a(s))}},N=(t,r)=>{if(t&&!r)return t;if(!t&&r)return r;const n=(...s)=>w(t(...s),r(...s)),a=b(t.variantKeys,r.variantKeys),f=a.reduce((s,e)=>(s[e]=b(t.variantMap[e],r.variantMap[e]),s),{});return Object.assign(n,{__recipe__:!0,__name__:`${t.__name__} ${r.__name__}`,raw:s=>s,variantKeys:a,variantMap:f,splitVariantProps(s){return j(s,a)}})};export{F as a,w as b,D as c,N as m};
